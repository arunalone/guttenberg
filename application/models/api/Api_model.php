<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Api_model extends CI_Model {    function __construct() {        parent:: __construct();    }    public function getBookList($start, $data) {        $this->db->select("A.title,A.id AS book_id,C.id AS author_id,C.name,CASE WHEN C.birth_year IS NULL THEN '' ELSE C.birth_year END AS birth_year,CASE WHEN C.death_year IS NULL THEN '' ELSE C.death_year END AS death_year,E.name AS bookshelf_name,G.code AS language,I.name AS subject,GROUP_CONCAT(J.mime_type,',') AS mime_type,GROUP_CONCAT(J.url) AS url");        $this->db->from(TBL_BOOKS_BOOK . ' AS A');        $this->db->join(TBL_BOOKS_FORMAT . ' AS J', 'J.book_id =A.gutenberg_id');        $this->db->join(TBL_BOOKS_BOOK_AUTHORS . ' AS B', 'B.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_AUTHOR . ' AS C', 'C.id = B.author_id');        $this->db->join(TBL_BOOKS_BOOK_BOOKSHELVES . ' AS D', 'D.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_BOOKSHELF . ' AS E', 'E.id = D.bookshelf_id');        $this->db->join(TBL_BOOKS_BOOK_LANGUAGE . ' AS F', 'F.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_LANGUAGE . ' AS G', 'G.id = F.language_id');        $this->db->join(TBL_BOOKS_BOOK_SUBJECTS . ' AS H', 'H.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_SUBJECT . ' AS I', 'I.id = H.subject_id');        if ($data['book_id'] > 0) {            $this->db->where('A.gutenberg_id', $data['book_id']);        }        if ($data['mime_type']) {            $this->db->where('J.mime_type', $data['mime_type']);        }        if ($data['book_title']) {            $this->db->like('A.title', $data['book_title'], 'both');        }        if ($data['author_name']) {            $name_arr = explode("__", $data['author_name']);            $where = "( C.name LIKE '%" . trim($name_arr[0]) . "%'";            for ($i = 1; $i < count($name_arr); $i++) {                $where .= " OR C.name LIKE '%" . trim($name_arr[$i]) . "%'";            }            $where .= ")";            $this->db->where($where, NULL, FALSE);        }        if ($data['book_topic']) {            $where = "";            $topic_arr = explode("__", $data['book_topic']);            $where .= "( I.name LIKE '%" . trim($topic_arr[0]) . "%'";            for ($j = 1; $j < count($topic_arr); $j++) {                $where .= " OR I.name LIKE '%" . trim($topic_arr[$j]) . "%'";            }            $where .= ")";            $this->db->where($where, NULL, FALSE);        }        if ($data['book_language']) {            $lang_arr = explode(",", $data['book_language']);            $this->db->where_in('G.code', $lang_arr);        }        $this->db->group_by('A.gutenberg_id');        $this->db->order_by('A.title', 'ASC');        $this->db->limit(PER_PAGE_RECORD, $start);        $query = $this->db->get();        return $result = ($query->num_rows() > 0) ? $query->result() : FALSE;    }    public function getBookListCount($data) {        $this->db->select("A.id");        $this->db->from(TBL_BOOKS_BOOK . ' AS A');        $this->db->join(TBL_BOOKS_FORMAT . ' AS J', 'J.book_id =A.gutenberg_id');        $this->db->join(TBL_BOOKS_BOOK_AUTHORS . ' AS B', 'B.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_AUTHOR . ' AS C', 'C.id = B.author_id');        $this->db->join(TBL_BOOKS_BOOK_BOOKSHELVES . ' AS D', 'D.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_BOOKSHELF . ' AS E', 'E.id = D.bookshelf_id');        $this->db->join(TBL_BOOKS_BOOK_LANGUAGE . ' AS F', 'F.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_LANGUAGE . ' AS G', 'G.id = F.language_id');        $this->db->join(TBL_BOOKS_BOOK_SUBJECTS . ' AS H', 'H.book_id = A.gutenberg_id');        $this->db->join(TBL_BOOKS_SUBJECT . ' AS I', 'I.id = H.subject_id');        if ($data['book_id'] > 0) {            $this->db->where('A.gutenberg_id', $data['book_id']);        }        if ($data['mime_type']) {            $this->db->where('J.mime_type', $data['mime_type']);        }        if ($data['book_title']) {            $this->db->like('A.title', $data['book_title'], 'both');        }        if ($data['author_name']) {            $name_arr = explode("__", $data['author_name']);            $where = "( C.name LIKE '%" . trim($name_arr[0]) . "%'";            for ($i = 1; $i < count($name_arr); $i++) {                $where .= " OR C.name LIKE '%" . trim($name_arr[$i]) . "%'";            }            $where .= ")";            $this->db->where($where, NULL, FALSE);        }        if ($data['book_topic']) {            $where = "";            $topic_arr = explode("__", $data['book_topic']);            $where .= "( I.name LIKE '%" . trim($topic_arr[0]) . "%'";            for ($j = 1; $j < count($topic_arr); $j++) {                $where .= " OR I.name LIKE '%" . trim($topic_arr[$j]) . "%'";            }            $where .= ")";            $this->db->where($where, NULL, FALSE);        }        if ($data['book_language']) {            $lang_arr = explode(",", $data['book_language']);            $this->db->where_in('G.code', $lang_arr);        }        $this->db->group_by('A.gutenberg_id');        $this->db->order_by('A.title', 'ASC');        $query = $this->db->get();        return $result = ($query->num_rows() > 0) ? $query->num_rows() : FALSE;    }}